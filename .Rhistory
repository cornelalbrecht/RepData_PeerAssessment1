str(req)
req$headers$date
a <- fromJSON(req)
library(jsonlite)
a <- fromJSON(req)
str(req)
str(req)
req$date
library(jsonlite)
a <- fromJSON(https://api.github.com/users/jtleek/repos)
a <- fromJSON("https://api.github.com/users/jtleek/repos")
str(a)
content(req)
View(a)
a[a$name = "datasharing"]
a[a$name = "datasharing",]
subset(a, a$name = "datasharing")
str(req)
req
?subset
subset(a, name = "datasharing")
b<- subset(a, name = "datasharing")
str(b)
b<- subset(a, name == "datasharing")
b
b$created_at
req$content
str(req)
test <- jsonlite::fromJSON(toJSON(req))
a <- fromJSON("https://api.github.com/users/jtleek/repos")
b$created_at
install.packages()
install.packages("sqldf")
library(sqldf)
acs
acs <- read.csv(file.choose())
str(acs)
?sqldf
sqldf("select pwgtp1 from acs where AGEP < 50")
str(sqldf("select pwgtp1 from acs where AGEP < 50"))
acs <- read.csv(file.choose())
str(acs$AGEP)
str(sqldf("select unique AGEP from acs"))
?unique
str(unique(acs$AGEP)
)
str(sqldf("select distinct AGEP from acs"))
library(httr)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
ht <- readLines(con)
close(con)
library(XML)
str(ht)
nchar(ht)
nu <- nchar(ht)
nu[10]
nu[20]
nu[30]
nu[100]
install.packages("foreign")
library(foreign)
?foreign
??Foreign
?read.fwf
a <- read.fwf(file.choose())
?read.fortran
a <- read.fortran(file.choose(),c("A9"))
View(a)
a <- read.fortran(file.choose(),c("A10"))
View(a)
View(a)
a <- read.fortran(file.choose(),c("A10", "D2.1"))
a <- read.fortran(file.choose(),c("A10", "D2.1"))
a <- read.fortran(file.choose(),c("A10", "2D2.1"))
a <- read.fortran(file.choose(),c("A10", "5D2.1"))
?read.fwf
a<- read.fwf(file.choose(), c(10,5,5,5))
View(a)
a<- read.fwf(file.choose(), c(10,5,4,4,5,4,4,5,4,4,5,4,4))
View(a)
str(a)
b <- as.numeric(a$V3)
rm(b)
b<- a[4:nrow(a),]
View(b)
View(b)
b<- a[5:nrow(a),]
View(b)
fourth <- as.numeric(b$V6)
nineth <- as.numeric(b$V13)
sum(fourth)
sum(nineth)
sum(fourth)+ sum(nineth)
nineth <- as.numeric(b$V12)
sum(nineth)
sum(nineth)+sum(forth)
sum(nineth)+sum(fourth)
sum(foruth)
sum(fourth)
sum(as.numeric(b$V6))
sum(as.numeric(b$V7))
a<- read.fwf(file.choose(), c(10,5,4,4,5,4,4,5,4,4,5,4,4), skip=5)
View(a)
a<- read.fwf(file.choose(), c(10,5,4,4,5,4,4,5,4,4,5,4,4), skip=4)
View(a)
b<-as.numeric(a$V6)
sum(b)
install.packages("lattice")
library(lattice)
str(xyplot())
?xyplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
View(airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
q()
# The infamous "Ampel"
library(TTR)
library(zoo)
ampel <- function(){
# Today minus 250 trading days
start.date <- format(Sys.Date()-300, "%Y%m%d")
end.date <- format(Sys.Date()-1, "%Y%m%d")
# Ticker Symbols
tickers <- c("^GDAXI", "^MDAXI", "^GSPC", "^NDX", "^GSPTSE", "^BVSP",
"^FTSE", "^SSMI", "^IBEX", "^FCHI", "FTSEMIB.MI", "^N225", "^HSI", "^AORD")
vals <- list()
SMAs <- list()
ratio <- list()
SMAratio <- list()
last10 <- list()
# Loop over ticker
for (i in tickers){
vals[[i]] <- getYahooData(i, start = start.date, end = end.date, adjust = TRUE, quiet = TRUE)
# Compute SMA for 125 days
SMAs[[i]] <- SMA(vals[[i]]$Close, n = 125)
# Run TSI-Ratio
ratio[[i]] <- vals[[i]]$Close / SMAs[[i]]
SMAratio[[i]] <- SMA(ratio[[i]], n = 14)
# Extract last 10 vals of each
a <- nrow(SMAratio[[i]])
b <- a-9L
# out <- merge(x = out, y = as.data.frame(SMAratio[[i]][b:a]) , all.y = TRUE)
last10 <- cbind(last10, as.numeric(SMAratio[[i]][b:a]))
}
# Make Out Matrix
matr <- matrix(unlist(last10), ncol = 14)
colnames(matr) <- tickers
# Ampel values
amp <- apply(matr,1,mean)
plot(amp)
amp.val <- mean(matr)
# Order Indices by TSi Strength
ord <- order(matr[nrow(matr),], decreasing = TRUE)
# Output
out <- list("AMPEL-value" = amp.val, "Indices" = matr[nrow(matr),ord], "10-day development" = amp)
# Write to file
# (to be implemented)
return(out)
}
ampel()
q()
q()
setwd("~/Google Drive/DataScienceClasses/Reproducible Research/Assignment1")
dat <- read.csv("activity.csv")
View(dat)
library(zoo)
library(dplyr)
library(lubridate)
install.packages("lubridate")
library(lubridate)
dat$date <- paste(dat$date,dat$interval)
dat$date <- paste(dat$date,dat$interval)
dat$date <- ymd_hm(dat$date)
dat$date <- ymd_hm(dat$date)
dat <- read.csv("activity.csv")
dat$date <- paste(dat$date,dat$interval)
hm(dat$interval)
dat$date <- as.Date(dat$date, format = "%Y-%m-%d %H%M")
View(dat)
# Loading data
dat <- read.csv("activity.csv")
# Parse Date
dat$date <- paste(dat$date,dat$interval)
as.Date(dat$date, format = "%Y-%m-%d %H%M")
?sprintf
str(dat)
sprintf("%04d", dat$interval)
format(dat$interval, digits = 4)
str(format(dat$interval, digits = 4))
str(format(dat$interval, digits = 4, zero.print = TRUE))
str(format(dat$interval, digits = 4, zero.print = 4))
str(format(dat$interval, digits = 4, zero.print = a))
str(format(dat$interval, digits = 4, zero.print = "a"))
str(format(dat$interval, digits = 4, zero.print = "234"))
str(format(dat$interval, digits = 4, zero.print = "2"))
str(format(dat$interval, digits = 4))
?sprintf
# Loading data
dat <- read.csv("activity.csv")
# Parse Time
dat$interval <- sprintf("%04f", dat$interval)
dat$date <- paste(dat$date,dat$interval)
dat <- read.csv("activity.csv")
# Parse Time
dat$interval <- sprintf("%04.0f", dat$interval)
dat$date <- paste(dat$date,dat$interval)
dat$date <- ymd_hm(dat$date)
dat %>% group_by(day(date))
day(dat$date)
?day
mday(dat$date)
daty(dat$date)
day(dat$date)
# Loading data
dat <- read.csv("activity.csv")
# Reformat interval and then make date stamp
dat$interval <- sprintf("%04.0f", dat$interval)
dat <- dat %>% mutate(tstamp = ymd_hm(paste(date, interval)))
View(dat)
dat %>% group_by(date) %>% summarize(sum(steps))
# Steps per day
perday <- dat %>% group_by(date) %>% summarize(steps = sum(steps))
# Histogram
ggplot(data = perday, aes(x = steps)) + geom_histogram()
gplot(data = perday, aes(x = steps)) + geom_histogram()
qplot(data = perday, aes(x = steps)) + geom_histogram()
library(ggplot2)
ggplot(data = perday, aes(x = steps)) + geom_histogram()
# Histogram
ggplot(data = perday, aes(y = steps)) + geom_histogram()
# Histogram
ggplot(data = perday, aes(steps)) + geom_histogram()
ggplot(data = perday, aes(steps)) + geom_histogram() + xlab("Number of Steps taken") + ylab("Count") + ggtitle("Histogram of Steps taken")
perday %>% summarize(mean.steps = mean(steps), median.steps = median(steps))
perday %>% summarize(mean.steps = mean(steps, na.rm = TRUE), median.steps = median(steps))
perday %>% summarize(mean.steps = mean(steps, na.rm = TRUE), median.steps = median(steps, na.rm = TRUE))
perday %>% summarize(mean.steps = mean(steps, na.rm = TRUE), median.steps = median(steps, na.rm = TRUE))
dat %>% group_by(interval) %>% summarize(mean.act = mean(steps))
dat %>% group_by(interval) %>% summarize(mean.act = mean(steps, na.rm = TRUE))
# Average steps per interval
act.int <- dat %>% group_by(interval) %>% summarize(mean.act = mean(steps, na.rm = TRUE))
ggplot(data = act.int, aes(x = interval, y = mean.act)) + geom_line()
ggplot(data = act.int, aes(x = interval, y = mean.act)) + geom_jitter()
ggplot(data = act.int, aes(x = interval, y = mean.act)) + geom_line()
str(act.int)
ggplot(data = act.int, aes(x = as.numeric(interval), y = mean.act)) + geom_line()
ggplot(data = act.int, aes(x = as.numeric(interval), y = mean.act)) + geom_line() + xlab("Time of day (in military format)") +
ylab("Mean Steps per interval") + ggtitle("Activity during the day") + continuous_scale_x(breaks = 1:2400)
# Line plot
ggplot(data = act.int, aes(x = as.numeric(interval), y = mean.act)) + geom_line() + xlab("Time of day (in military format)") +
ylab("Mean Steps per interval") + ggtitle("Activity during the day") + continuous_x_scale(breaks = 1:2400)
?continuous_scale
?seq
ggplot(data = act.int, aes(x = as.numeric(interval), y = mean.act)) + geom_line() + xlab("Time of day (in military format)") +
ylab("Mean Steps per interval") + ggtitle("Activity during the day") + scale_x_continuous(breaks = seq(1,2400,100))
# Line plot
ggplot(data = act.int, aes(x = as.numeric(interval), y = mean.act)) + geom_line() + xlab("Time of day (in military format)") +
ylab("Mean Steps per interval") + ggtitle("Activity during the day") + scale_x_continuous(breaks = seq(0,2400,100))
ggplot(data = act.int, aes(x = as.numeric(interval), y = mean.act)) + geom_line() + xlab("Time of day (in military format)") +
ylab("Mean Steps per interval") + ggtitle("Activity during the day") + scale_x_continuous(breaks = seq(0,2400,200))
sum(is.na(dat$steps))
dat %>% summarize(NAs = sum(is.na(steps)))
act.int <- dat %>% group_by(interval) %>% summarize(mean.act = mean(steps, na.rm = TRUE))
act.int
data <- merge(dat,act.int, by.x)
data <- merge(dat,act.int)
View(data)
is.na(dat$steps)
plot(dat$steps,dat$tstamp)
plot(dat$tstamp)
mdat <- merge(dat,act.int)
rm(data)
plot(mdat$mean.act)
plot(mdat$mean.act, type = "l")
plot(mdat$date, mdat$mean.act, type = "l")
if(is.na(mdat$steps)){mdat$steps <- mdat$mean.act}
?mappply
?mapply
?apply
mdat <- merge(dat,act.int)
for(i in 1:nrow(mdat)){
if(is.na(mdat$steps[i])){
mdat$steps[i] <- mdat$mean.act[i]
}
}
View(mdat)
act.int
act.int$interval == dat$interval[i]
View(dat)
for(i in 1:nrow(dat)){
if(is.na(dat$steps[i])){
dat$steps[i] <- act.int[act.int$interval == dat$interval[i]]
}
}
setwd("~/Google Drive/DataScienceClasses/Reproducible Research/Assignment1")
# Packages
library(zoo)
library(dplyr)
library(lubridate)
library(ggplot2)
# Loading data
dat <- read.csv("activity.csv")
# Reformat interval and then make date stamp
dat$interval <- sprintf("%04.0f", dat$interval)
dat <- dat %>% mutate(tstamp = ymd_hm(paste(date, interval)))
# Steps per day
perday <- dat %>% group_by(date) %>% summarize(steps = sum(steps))
# Histogram
ggplot(data = perday, aes(steps)) + geom_histogram() + xlab("Number of Steps taken") + ylab("Count") + ggtitle("Histogram of Steps taken")
# Mean and Median
perday %>% summarize(mean.steps = mean(steps, na.rm = TRUE), median.steps = median(steps, na.rm = TRUE))
####
# Average steps per interval
act.int <- dat %>% group_by(interval) %>% summarize(mean.act = mean(steps, na.rm = TRUE))
# Line plot
ggplot(data = act.int, aes(x = as.numeric(interval), y = mean.act)) + geom_line() + xlab("Time of day (in military format)") +
ylab("Mean Steps per interval") + ggtitle("Activity during the day") + scale_x_continuous(breaks = seq(0,2400,200))
###
# Count NAs
dat %>% summarize(NAs = sum(is.na(steps)))
# Fill in with mean for that day
for(i in 1:nrow(dat)){
if(is.na(dat$steps[i])){
dat$steps[i] <- act.int[as.numeric(act.int$interval) == dat$interval[i]]
}
}
View(dat)
act.int[as.numeric(act.int$interval)
]
act.int
act.int$mean.act[act.int$interval == dat$interval[i]]
# Fill in with mean for that day
for(i in 1:nrow(dat)){
if(is.na(dat$steps[i])){
dat$steps[i] <- act.int$mean.act[act.int$interval == dat$interval[i]]
}
}
setwd("~/Google Drive/DataScienceClasses/Reproducible Research/Assignment1")
# Packages
library(zoo)
library(dplyr)
library(lubridate)
library(ggplot2)
# Loading data
dat <- read.csv("activity.csv")
# Reformat interval and then make date stamp
dat$interval <- sprintf("%04.0f", dat$interval)
dat <- dat %>% mutate(tstamp = ymd_hm(paste(date, interval)))
# Steps per day
perday <- dat %>% group_by(date) %>% summarize(steps = sum(steps))
# Histogram
ggplot(data = perday, aes(steps)) + geom_histogram() + xlab("Number of Steps taken") + ylab("Count") + ggtitle("Histogram of Steps taken")
# Mean and Median
perday %>% summarize(mean.steps = mean(steps, na.rm = TRUE), median.steps = median(steps, na.rm = TRUE))
####
# Average steps per interval
act.int <- dat %>% group_by(interval) %>% summarize(mean.act = mean(steps, na.rm = TRUE))
# Line plot
ggplot(data = act.int, aes(x = as.numeric(interval), y = mean.act)) + geom_line() + xlab("Time of day (in military format)") +
ylab("Mean Steps per interval") + ggtitle("Activity during the day") + scale_x_continuous(breaks = seq(0,2400,200))
###
# Count NAs
dat %>% summarize(NAs = sum(is.na(steps)))
# Fill in with mean for that day
ndat <- dat
for(i in 1:nrow(ndat)){
if(is.na(ndat$steps[i])){
ndat$steps[i] <- act.int$mean.act[act.int$interval == ndat$interval[i]]
}
}
View(ndat)
nperday <- ndat %>% group_by(date) %>% summarize(steps = sum(steps))
ggplot(data = nperday, aes(steps)) + geom_histogram() + xlab("Number of Steps taken") + ylab("Count") + ggtitle("Histogram of Steps taken")
nperday %>% summarize(mean.steps = mean(steps, na.rm = TRUE), median.steps = median(steps, na.rm = TRUE))
View(dat)
# Loading data
dat <- read.csv("activity.csv")
# Reformat interval and then make date stamp
dat$interval <- sprintf("%04.0f", dat$interval)
dat$date <- ymd(dat$date)
##dat <- dat %>% mutate(tstamp = ymd_hm(paste(date, interval)))
# Steps per day
perday <- dat %>% group_by(date) %>% summarize(steps = sum(steps))
# Histogram
ggplot(data = perday, aes(steps)) + geom_histogram() + xlab("Number of Steps taken") + ylab("Count") + ggtitle("Histogram of Steps taken")
# Mean and Median
perday %>% summarize(mean.steps = mean(steps, na.rm = TRUE), median.steps = median(steps, na.rm = TRUE))
####
# Average steps per interval
act.int <- dat %>% group_by(interval) %>% summarize(mean.act = mean(steps, na.rm = TRUE))
# Line plot
ggplot(data = act.int, aes(x = as.numeric(interval), y = mean.act)) + geom_line() + xlab("Time of day (in military format)") +
ylab("Mean Steps per interval") + ggtitle("Activity during the day") + scale_x_continuous(breaks = seq(0,2400,200))
###
# Count NAs
dat %>% summarize(NAs = sum(is.na(steps)))
# Creat new data set and fill in with mean for that day
ndat <- dat
for(i in 1:nrow(ndat)){
if(is.na(ndat$steps[i])){
ndat$steps[i] <- act.int$mean.act[act.int$interval == ndat$interval[i]]
}
}
# Histogram
nperday <- ndat %>% group_by(date) %>% summarize(steps = sum(steps))
ggplot(data = nperday, aes(steps)) + geom_histogram() + xlab("Number of Steps taken") + ylab("Count") + ggtitle("Histogram of Steps taken")
# Mean and Median
nperday %>% summarize(mean.steps = mean(steps, na.rm = TRUE), median.steps = median(steps, na.rm = TRUE))
#### Weekday analysis
weekdays(dat$date)
weekdays(dat$date, abbreviate = FALSE)
weekdays(dat$date, abbreviate = TRUE)
?ifesle
?ifelse
ndat %>% mutate(weekend = ifelse(weekdays(Date, TRUE) == "Sun" | weekdays(Date, TRUE) == "Sun", "Weekend", "Weekday"))
ndat %>% mutate(weekend = ifelse(weekdays(date, TRUE) == "Sun" | weekdays(date, TRUE) == "Sun", "Weekend", "Weekday"))
View(ndat)
ndat <- ndat %>% mutate(weekend = ifelse(weekdays(date, TRUE) == "Sun" | weekdays(date, TRUE) == "Sun", "Weekend", "Weekday"))
View(ndat)
str(ndat)
as.factor(ndat$weekend)
ndat$weekend <- as.factor(ndat$weekend)
str(ndat)
setwd("~/Google Drive/DataScienceClasses/Reproducible Research/Assignment1")
# Packages
library(zoo)
library(dplyr)
library(lubridate)
library(ggplot2)
# Loading data
dat <- read.csv("activity.csv")
# Reformat interval and then make date stamp
dat$interval <- sprintf("%04.0f", dat$interval)
dat$date <- ymd(dat$date)
##dat <- dat %>% mutate(tstamp = ymd_hm(paste(date, interval)))
# Steps per day
perday <- dat %>% group_by(date) %>% summarize(steps = sum(steps))
# Histogram
ggplot(data = perday, aes(steps)) + geom_histogram() + xlab("Number of Steps taken") + ylab("Count") + ggtitle("Histogram of Steps taken")
# Mean and Median
perday %>% summarize(mean.steps = mean(steps, na.rm = TRUE), median.steps = median(steps, na.rm = TRUE))
####
# Average steps per interval
act.int <- dat %>% group_by(interval) %>% summarize(mean.act = mean(steps, na.rm = TRUE))
# Line plot
ggplot(data = act.int, aes(x = as.numeric(interval), y = mean.act)) + geom_line() + xlab("Time of day (in military format)") +
ylab("Mean Steps per interval") + ggtitle("Activity during the day") + scale_x_continuous(breaks = seq(0,2400,200))
###
# Count NAs
dat %>% summarize(NAs = sum(is.na(steps)))
# Creat new data set and fill in with mean for that day
ndat <- dat
for(i in 1:nrow(ndat)){
if(is.na(ndat$steps[i])){
ndat$steps[i] <- act.int$mean.act[act.int$interval == ndat$interval[i]]
}
}
# Histogram
nperday <- ndat %>% group_by(date) %>% summarize(steps = sum(steps))
ggplot(data = nperday, aes(steps)) + geom_histogram() + xlab("Number of Steps taken") + ylab("Count") + ggtitle("Histogram of Steps taken")
# Mean and Median
nperday %>% summarize(mean.steps = mean(steps, na.rm = TRUE), median.steps = median(steps, na.rm = TRUE))
#### Weekday analysis
ndat <- ndat %>% mutate(weekend = factor(ifelse(weekdays(date, TRUE) == "Sun" | weekdays(date, TRUE) == "Sun", "Weekend", "Weekday")))
str(ndat)
nact.int <- dat %>% group_by(interval) %>% summarize(mean.act = mean(steps, na.rm = TRUE))
ggplot(data = nact.int, aes(x = as.numeric(interval), y = mean.act)) + geom_line() + xlab("Time of day (in military format)") +
ylab("Mean Steps per interval") + ggtitle("Activity during the day") + scale_x_continuous(breaks = seq(0,2400,200)) + facet_grid(.~weekend)
ggplot(data = nact.int, aes(x = as.numeric(interval), y = mean.act)) + geom_line() + xlab("Time of day (in military format)") +
ylab("Mean Steps per interval") + ggtitle("Activity during the day") + scale_x_continuous(breaks = seq(0,2400,200)) + facet_grid(~.weekend)
nact.int
nact.int <- ndat %>% group_by(interval, weekend) %>% summarize(mean.act = mean(steps, na.rm = TRUE))
nact.int
ggplot(data = nact.int, aes(x = as.numeric(interval), y = mean.act)) + geom_line() + xlab("Time of day (in military format)") +
ylab("Mean Steps per interval") + ggtitle("Activity during the day") + scale_x_continuous(breaks = seq(0,2400,200)) + facet_grid(~.weekend)
?facet_grid
ggplot(data = nact.int, aes(x = as.numeric(interval), y = mean.act)) + geom_line() + xlab("Time of day (in military format)") +
ylab("Mean Steps per interval") + ggtitle("Activity during the day") + scale_x_continuous(breaks = seq(0,2400,200)) + facet_grid(. ~ weekend)
ggplot(data = nact.int, aes(x = as.numeric(interval), y = mean.act)) + geom_line() + xlab("Time of day (in military format)") +
ylab("Mean Steps per interval") + ggtitle("Activity during the day") + scale_x_continuous(breaks = seq(0,2400,200)) + facet_grid(weekend ~ .)
setwd("~/Google Drive/DataScienceClasses/Reproducible Research/Assignment1")
# Packages
library(zoo)
library(dplyr)
library(lubridate)
library(ggplot2)
perday
act.int
act.int %>% filter(max(mean.act)
)
act.int %>% select(max(mean.act))
max(act.int$mean.act)
act.int %>% filter(test = max(mean.act))
act.int %>% top_n()
act.int %>% top_n(1)
?top_n
setwd("~/Google Drive/DataScienceClasses/Reproducible Research/Assignment1/github")
q()
